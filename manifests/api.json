[
  {
    "path": "api/openapi.yaml",
    "content": "openapi: 3.1.0\\ninfo:\\n  title: Sample Service\\n  version: 0.1.0\\npaths:\\n  /v1/health:\\n    get:\\n      summary: Liveness/health\\n      responses:\\n        \"200\":\\n          description: OK\\n          content:\\n            application/json:\\n              schema:\\n                type: object\\n                properties:\\n                  status: { type: string, enum: [ok] }\\n"
  },
  {
    "path": "app-api/AppApi.sln",
    "content": "Microsoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio Version 17\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"AppApi.Web\", \"src/AppApi.Web/AppApi.Web.csproj\", \"{00000001-0000-0000-0000-000000000001}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"AppApi.Application\", \"src/AppApi.Application/AppApi.Application.csproj\", \"{00000002-0000-0000-0000-000000000002}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"AppApi.Domain\", \"src/AppApi.Domain/AppApi.Domain.csproj\", \"{00000003-0000-0000-0000-000000000003}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"AppApi.Infrastructure\", \"src/AppApi.Infrastructure/AppApi.Infrastructure.csproj\", \"{00000004-0000-0000-0000-000000000004}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"UnitTests\", \"tests/UnitTests/UnitTests.csproj\", \"{00000005-0000-0000-0000-000000000005}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"ArchitectureTests\", \"tests/ArchitectureTests/ArchitectureTests.csproj\", \"{00000006-0000-0000-0000-000000000006}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"IntegrationTests\", \"tests/IntegrationTests/IntegrationTests.csproj\", \"{00000007-0000-0000-0000-000000000007}\"\r\nEndProject\r\nGlobal\r\nEndGlobal\r\n"
  },
  {
    "path": "app-api/src/AppApi.Web/Program.cs",
    "content": "var builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\nvar app = builder.Build();\napp.MapGet(\"/v1/health\", () => Results.Json(new { status = \"ok\" }));\napp.Run();\npublic partial class Program { }\n"
  },
  {
    "path": "app-api/src/AppApi.Web/AppApi.Web.csproj",
    "content": "<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n  <PropertyGroup>\n    <TargetFramework>net8.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\AppApi.Application\\AppApi.Application.csproj\" />\n  </ItemGroup>\n</Project>\n"
  },
  {
    "path": "app-api/src/AppApi.Application/AppApi.Application.csproj",
    "content": "<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>net8.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\n  </PropertyGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\AppApi.Domain\\AppApi.Domain.csproj\" />\n  </ItemGroup>\n</Project>\n"
  },
  {
    "path": "app-api/src/AppApi.Domain/AppApi.Domain.csproj",
    "content": "<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>net8.0</TargetFramework>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n</Project>\n"
  },
  {
    "path": "app-api/src/AppApi.Infrastructure/AppApi.Infrastructure.csproj",
    "content": "<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>net8.0</TargetFramework>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Npgsql.EntityFrameworkCore.PostgreSQL\" Version=\"8.0.4\" />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\AppApi.Domain\\AppApi.Domain.csproj\" />\n  </ItemGroup>\n</Project>\n"
  },
  {
    "path": "app-api/tests/ArchitectureTests/ArchitectureTests.csproj",
    "content": "<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>net8.0</TargetFramework>\n    <IsPackable>false</IsPackable>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include=\"NetArchTest.Rules\" Version=\"1.3.0\" />\n    <PackageReference Include=\"xunit\" Version=\"2.7.0\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.5.7\" />\n  </ItemGroup>\n</Project>\n"
  },
  {
    "path": "app-api/tests/ArchitectureTests/LayeringTests.cs",
    "content": "using NetArchTest.Rules;\nusing Xunit;\nnamespace AppApi.ArchitectureTests;\npublic class LayeringTests\n{\n    [Fact]\n    public void Domain_must_be_pure()\n    {\n        var r = Types.InCurrentDomain()\n          .That().ResideInNamespace(\"AppApi.Domain\")\n          .Should().NotHaveDependencyOnAny(new[] { \"AppApi.Infrastructure\", \"AppApi.Application\", \"AppApi.Web\", \"Microsoft.EntityFrameworkCore\" })\n          .GetResult();\n        Assert.True(r.IsSuccessful, string.Join(\"\\n\", r.FailingTypeNames));\n    }\n    [Fact]\n    public void Application_must_not_depend_on_Web_or_Infrastructure()\n    {\n        var r = Types.InCurrentDomain()\n          .That().ResideInNamespace(\"AppApi.Application\")\n          .Should().NotHaveDependencyOnAny(new[] { \"AppApi.Web\", \"AppApi.Infrastructure\" })\n          .GetResult();\n        Assert.True(r.IsSuccessful, string.Join(\"\\n\", r.FailingTypeNames));\n    }\n    [Fact]\n    public void Web_must_not_reference_EFCore()\n    {\n        var r = Types.InCurrentDomain()\n          .That().ResideInNamespace(\"AppApi.Web\")\n          .Should().NotHaveDependencyOn(\"Microsoft.EntityFrameworkCore\")\n          .GetResult();\n        Assert.True(r.IsSuccessful, string.Join(\"\\n\", r.FailingTypeNames));\n    }\n}\n"
  },
  {
    "path": "app-api/tests/UnitTests/UnitTests.csproj",
    "content": "<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>net8.0</TargetFramework>\n    <IsPackable>false</IsPackable>\n    <CollectCoverage>true</CollectCoverage>\n    <Threshold>80</Threshold>\n    <ThresholdType>line</ThresholdType>\n  </PropertyGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\AppApi.Application\\AppApi.Application.csproj\" />\n    <PackageReference Include=\"coverlet.msbuild\" Version=\"6.0.0\" />\n    <PackageReference Include=\"FluentAssertions\" Version=\"6.12.0\" />\n    <PackageReference Include=\"xunit\" Version=\"2.7.0\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.5.7\" />\n  </ItemGroup>\n</Project>\n"
  },
  {
    "path": "app-api/tests/UnitTests/SampleTests.cs",
    "content": "using Xunit;using FluentAssertions;namespace AppApi.UnitTests;public class SampleTests{[Fact]public void Red_to_Green_example(){var sum=1+1;sum.Should().Be(2);}}\n"
  },
  {
    "path": "app-api/tests/IntegrationTests/IntegrationTests.csproj",
    "content": "<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>net8.0</TargetFramework>\n    <IsPackable>false</IsPackable>\n  </PropertyGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\AppApi.Web\\AppApi.Web.csproj\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Testing\" Version=\"8.0.8\" />\n    <PackageReference Include=\"xunit\" Version=\"2.7.0\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.5.7\" />\n  </ItemGroup>\n</Project>\n"
  },
  {
    "path": "app-api/tests/IntegrationTests/HealthTests.cs",
    "content": "using System.Net;using Microsoft.AspNetCore.Mvc.Testing;using Xunit;public class HealthTests: IClassFixture<WebApplicationFactory<Program>>{private readonly HttpClient _client;public HealthTests(WebApplicationFactory<Program> factory)=>_client=factory.CreateClient();[Fact]public async Task Health_returns_ok(){var res=await _client.GetAsync(\"/v1/health\");Assert.Equal(HttpStatusCode.OK,res.StatusCode);}}\n"
  }
]