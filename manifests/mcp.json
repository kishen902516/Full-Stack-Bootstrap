[
  {
    "path": "mcp/config.json",
    "content": "{\n  \"version\": 1,\n  \"deny\": [\"bash\", \"sh\", \"powershell\", \"curl\", \"wget\"],\n  \"mcpServers\": {\n    \"github\": { \"command\": \"npx\", \"args\": [\"mcp-github\"], \"env\": { \"GITHUB_TOKEN\": \"${GITHUB_TOKEN}\" }, \"transport\": \"stdio\" },\n    \"atlassian\": { \"command\": \"npx\", \"args\": [\"mcp-atlassian\"], \"env\": { \"ATLASSIAN_HOST\": \"${ATLASSIAN_HOST}\", \"ATLASSIAN_EMAIL\": \"${ATLASSIAN_EMAIL}\", \"ATLASSIAN_API_TOKEN\": \"${ATLASSIAN_API_TOKEN}\" }, \"transport\": \"stdio\" },\n    \"playwright\": { \"command\": \"node\", \"args\": [\"tools/mcp/playwright-server.js\"], \"transport\": \"stdio\" },\n    \"context7\": { \"command\": \"node\", \"args\": [\"tools/mcp/context7-server.js\"], \"env\": { \"CTX7_STORE\": \"${CTX7_STORE:./.context7}\" }, \"transport\": \"stdio\" }\n  },\n  \"tools\": [\n    { \"id\": \"arch_check\",          \"cmd\": \"bash -lc 'cd app-frontend && npm run arch:check && cd - >/dev/null && dotnet test ./app-api/tests/ArchitectureTests'\" },\n    { \"id\": \"api_contract_verify\", \"cmd\": \"bash -lc 'cd app-frontend && npm run api:lint && npm run api:diff'\" },\n    { \"id\": \"test_pyramid\",        \"cmd\": \"node tools/metrics/check-pyramid.js\" },\n    { \"id\": \"security_scan\",       \"cmd\": \"gitleaks detect --no-git --redact --config tools/security/gitleaks.toml && semgrep --config tools/security/semgrep.yml\" },\n    { \"id\": \"git_feature\",         \"cmd\": \"bash tools/git/flow.sh feature ${args}\" },\n    { \"id\": \"git_release\",         \"cmd\": \"bash tools/git/flow.sh release ${args}\" },\n    { \"id\": \"plan_create\",         \"cmd\": \"node tools/mcp/plan-create.js ${args}\" },\n    { \"id\": \"plan_check\",          \"cmd\": \"node tools/mcp/plan-check.js ${args}\" }\n  ]\n}\n"
  },
  {
    "path": "tools/mcp/playwright-server.js",
    "content": "#!/usr/bin/env node\nconst { spawn } = require('child_process');\nfunction run(cmd,args,cwd){return new Promise((res,rej)=>{const p=spawn(cmd,args,{cwd,stdio:['ignore','pipe','pipe']});let out='',err='';p.stdout.on('data',d=>out+=d.toString());p.stderr.on('data',d=>err+=d.toString());p.on('close',c=>c===0?res(out.trim()):rej(new Error(err||out)));});}\nprocess.stdin.on('data', async (chunk)=>{const lines=chunk.toString().split('\\n').filter(Boolean);for(const line of lines){let req;try{req=JSON.parse(line);}catch{continue;}try{let resStr='';if(req.tool==='run_e2e') resStr=await run('npm',['run','e2e','--silent'],'app-frontend');\nelse if(req.tool==='show_report') resStr='app-frontend/playwright-report/index.html';\nelse if(req.tool==='show_trace') resStr=await run('npx',['playwright','show-trace', req.args?.[0] || 'trace.zip'],'app-frontend');\nelse throw new Error('unknown tool');\nprocess.stdout.write(JSON.stringify({id:req.id, ok:true, stdout:resStr})+'\\n');}catch(e){process.stdout.write(JSON.stringify({id:req.id, ok:false, error:e.message})+'\\n');}}});\n"
  },
  {
    "path": "tools/mcp/context7-index.js",
    "content": "#!/usr/bin/env node\nconst fs=require('fs'), globby=require('globby');(async()=>{const cfg=fs.readFileSync('context7/sources.yaml','utf8');const include=[...cfg.matchAll(/- \"([^\"]+)\"/g)].map(m=>m[1]);const files=await globby(include,{gitignore:true});fs.mkdirSync('.context7',{recursive:true});fs.writeFileSync('.context7/manifest.json',JSON.stringify({files},null,2));console.log(`Indexed ${files.length} files for Context7`);})();\n"
  },
  {
    "path": "tools/mcp/context7-server.js",
    "content": "#!/usr/bin/env node\nconst fs=require('fs'), { spawnSync }=require('child_process'), globby=require('globby');\nasync function refresh(){ spawnSync('node',['tools/mcp/context7-index.js'],{stdio:'inherit'}); return 'OK'; }\nasync function search(glob){ const files=await globby(glob,{gitignore:true}); return files.slice(0,50); }\nfunction read(p,start=0,end=2000){ return fs.readFileSync(p,'utf8').slice(Number(start),Number(end)); }\nprocess.stdin.on('data', async (chunk)=>{ const lines=chunk.toString().split('\\n').filter(Boolean); for(const line of lines){ let req; try{ req=JSON.parse(line);}catch{continue;} try{ let out; if(req.tool==='ctx7.refresh') out=await refresh(); else if(req.tool==='ctx7.search') out=await search(req.args?.[0]||'docs/**/*.md'); else if(req.tool==='ctx7.read') out=read(req.args?.[0],req.args?.[1],req.args?.[2]); else throw new Error('unknown tool'); process.stdout.write(JSON.stringify({id:req.id, ok:true, stdout:out})+'\\n'); } catch(e){ process.stdout.write(JSON.stringify({id:req.id, ok:false, error:e.message})+'\\n'); } }});\n"
  },
  {
    "path": "tools/mcp/plan-create.js",
    "content": "#!/usr/bin/env node\nconst fs=require('fs'),path=require('path');const args=process.argv.slice(2).join(' ').trim()||'Change Plan';const id=new Date().toISOString().replace(/[:.]/g,'').slice(0,15);const file=path.join('plans',`${id}.md`);fs.mkdirSync('plans',{recursive:true});fs.writeFileSync(file,`# ${args}\\n\\n## Steps\\n1. \\n2. \\n3. \\n\\n## Affected Areas\\n- \\n\\n## Tests\\n- Unit: \\n- Contract: \\n- E2E: \\n`);console.log(id);\n"
  },
  {
    "path": "tools/mcp/plan-check.js",
    "content": "#!/usr/bin/env node\nconst fs=require('fs');const id=process.argv[2];if(!id||!fs.existsSync(`plans/${id}.md`)){ console.error('Missing or invalid plan. Create one with /plan create \"<title>\".'); process.exit(1);} console.log('Plan OK');\n"
  },
  {
    "path": "context7/sources.yaml",
    "content": "include:\n  - \"api/**/*.yaml\"\n  - \"standards/**/*.md\"\n  - \"docs/**/*.md\"\n  - \"app-api/**/*.cs\"\n  - \"app-frontend/src/**/*.ts\"\nexclude:\n  - \"**/node_modules/**\"\n  - \"**/bin/**\"\n  - \"**/obj/**\"\n"
  },
  { "path": "context7/.gitkeep", "content": "" }
]