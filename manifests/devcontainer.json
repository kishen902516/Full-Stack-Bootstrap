[
  {
    "path": ".devcontainer/Dockerfile",
    "content": "FROM node:20\n\nARG TZ\nENV TZ=\"$TZ\"\n\nARG CLAUDE_CODE_VERSION=latest\n\n# Install basic development tools and iptables/ipset\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n  less \\\n  git \\\n  procps \\\n  sudo \\\n  fzf \\\n  zsh \\\n  man-db \\\n  unzip \\\n  gnupg2 \\\n  gh \\\n  iptables \\\n  ipset \\\n  iproute2 \\\n  dnsutils \\\n  aggregate \\\n  jq \\\n  nano \\\n  vim \\\n  && apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Ensure default node user has access to /usr/local/share\nRUN mkdir -p /usr/local/share/npm-global && \\\n  chown -R node:node /usr/local/share\n\nARG USERNAME=node\n\n# Persist bash history.\nRUN SNIPPET=\"export PROMPT_COMMAND='history -a' && export HISTFILE=/commandhistory/.bash_history\" \\\n  && mkdir /commandhistory \\\n  && touch /commandhistory/.bash_history \\\n  && chown -R $USERNAME /commandhistory\n\n# Set `DEVCONTAINER` environment variable to help with orientation\nENV DEVCONTAINER=true\n\n# Create workspace and config directories and set permissions\nRUN mkdir -p /workspace /home/node/.claude && \\\n  chown -R node:node /workspace /home/node/.claude\n\nWORKDIR /workspace\n\nARG GIT_DELTA_VERSION=0.18.2\nRUN ARCH=$(dpkg --print-architecture) && \\\n  wget \"https://github.com/dandavison/delta/releases/download/${GIT_DELTA_VERSION}/git-delta_${GIT_DELTA_VERSION}_${ARCH}.deb\" && \\\n  sudo dpkg -i \"git-delta_${GIT_DELTA_VERSION}_${ARCH}.deb\" && \\\n  rm \"git-delta_${GIT_DELTA_VERSION}_${ARCH}.deb\"\n\n# Set up non-root user\nUSER node\n\n# Install global packages\nENV NPM_CONFIG_PREFIX=/usr/local/share/npm-global\nENV PATH=$PATH:/usr/local/share/npm-global/bin\n\n# Set the default shell to zsh rather than sh\nENV SHELL=/bin/zsh\n\n# Set the default editor and visual\nENV EDITOR=nano\nENV VISUAL=nano\n\n# Default powerline10k theme\nARG ZSH_IN_DOCKER_VERSION=1.2.0\nRUN sh -c \"$(wget -O- https://github.com/deluan/zsh-in-docker/releases/download/v${ZSH_IN_DOCKER_VERSION}/zsh-in-docker.sh)\" -- \\\n  -p git \\\n  -p fzf \\\n  -a \"source /usr/share/doc/fzf/examples/key-bindings.zsh\" \\\n  -a \"source /usr/share/doc/fzf/examples/completion.zsh\" \\\n  -a \"export PROMPT_COMMAND='history -a' && export HISTFILE=/commandhistory/.bash_history\" \\\n  -x\n\n# Install Claude\nRUN npm install -g @anthropic-ai/claude-code@${CLAUDE_CODE_VERSION}\n\n\n# Copy and set up firewall script\nCOPY .devcontainer/init-firewall.sh /usr/local/bin/\nUSER root\nRUN chmod +x /usr/local/bin/init-firewall.sh && \\\n  echo \"node ALL=(root) NOPASSWD: /usr/local/bin/init-firewall.sh\" > /etc/sudoers.d/node-firewall && \\\n  chmod 0440 /etc/sudoers.d/node-firewall\nUSER node\n"
  },
  {
    "path": ".devcontainer/init-firewall.sh",
    "content": "#!/usr/bin/env bash\nset -euo pipefail\n# Minimal, opt-in egress limiter. No-op unless FIREWALL_STRICT=1\nif [[ \"${FIREWALL_STRICT:-0}\" != \"1\" ]]; then\n  echo \"init-firewall: noop (set FIREWALL_STRICT=1 to enable rules)\"; exit 0; fi\n\n# Flush and default policies\niptables -F\niptables -P INPUT ACCEPT\niptables -P FORWARD DROP\niptables -P OUTPUT DROP\n\n# Allow loopback\niptables -A OUTPUT -o lo -j ACCEPT\n\n# Allow DNS (TCP/UDP 53)\niptables -A OUTPUT -p udp --dport 53 -j ACCEPT\niptables -A OUTPUT -p tcp --dport 53 -j ACCEPT\n\n# Allow HTTPS (443) and Git (ssh 22)\niptables -A OUTPUT -p tcp --dport 443 -j ACCEPT\niptables -A OUTPUT -p tcp --dport 22 -j ACCEPT\n\necho \"init-firewall: strict egress policy enabled\"\n"
  },
  {
    "path": ".devcontainer/devcontainer.json",
    "content": "{\n  \"name\": \"BMAD CCA\",\n  \"build\": {\n    \"dockerfile\": \"./Dockerfile\",\n    \"context\": \"..\",\n    \"args\": {\n      \"TZ\": \"Asia/Singapore\",\n      \"CLAUDE_CODE_VERSION\": \"latest\"\n    }\n  },\n  \"features\": {\n    \"ghcr.io/devcontainers/features/dotnet:2\": { \"version\": \"8.0\" }\n  },\n  \"remoteUser\": \"node\",\n  \"mounts\": [\n    \"source=${localEnv:USERPROFILE}/.claude,target=/home/node/.claude,type=bind,consistency=cached\"\n  ],\n  \"postCreateCommand\": \"cd app-frontend && ( [ -f package-lock.json ] && npm ci || npm install ) || true && cd - >/dev/null && dotnet restore ./app-api/AppApi.sln && bash ./scripts/install-hooks.sh && node tools/mcp/context7-index.js\",\n  \"postStartCommand\": \"sudo /usr/local/bin/init-firewall.sh || true\",\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\"anthropic.claude-dev\"]\n    }\n  }\n}\n"
  }
]