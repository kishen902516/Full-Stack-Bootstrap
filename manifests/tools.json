[
  {
    "path": "tools/hooks/commit-msg",
    "content": "#!/usr/bin/env bash\nset -euo pipefail\nMSG=\"$(head -n1 \\\"$1\\\")\"\nRE='^(build|ci|chore|docs|feat|fix|perf|refactor|revert|test)(\\([a-z-]+\\))?!?: .{1,72}$'\necho \"$MSG\" | grep -Eq \"$RE\" || { echo \"❌ Conventional Commit required (≤72 chars).\"; echo \"e.g. feat(api): add GET /orders\"; exit 1; }\n"
  },
  {
    "path": "tools/hooks/pre-commit",
    "content": "#!/usr/bin/env bash\nset -euo pipefail\nADDED=$(git diff --cached --numstat | awk '{a+=$1}END{print a+0}')\nFILES=$(git diff --cached --name-only --diff-filter=ACM | wc -l | xargs)\n[[ \"${BREAK_GLASS:-0}\" == \"1\" ]] || { (( ADDED<=200 && FILES<=10 )) || { echo \"❌ Small commits only (≤200 lines, ≤10 files).\"; exit 1; }; }\nCHANGED=$(git diff --cached --name-only --diff-filter=ACM)\necho \"$CHANGED\" | grep -E '\\\\.(cs|ts|tsx)$' >/dev/null && echo \"$CHANGED\" | grep -E '(tests?|__tests__|\\\\.spec\\\\.ts|Tests\\\\.cs)' >/dev/null || { echo \"❌ Add tests with your code (TDD).\"; exit 1; }\n# Large change requires a plan\nif (( ADDED > ${PLAN_THRESHOLD:-100} )); then\n  PLAN_ID=$(git log -1 --pretty=%B | sed -n 's/.*Plan-ID:\\s*\\([0-9T-]\\+\\).*/\\1/p')\n  [[ -n \"$PLAN_ID\" ]] && node tools/mcp/plan-check.js \"$PLAN_ID\" || { echo \"❌ Large change requires a plan. Use /plan create and add 'Plan-ID: <id>' to commit/PR.\"; exit 1; }\nfi\n# Secrets quick regex\nif git diff --cached -U0 | grep -E '(AKIA|AIza|secret|api[_-]?key|password\\s*:|password\\s*=)'; then\n  echo \"❌ Potential secret in diff. Remove or externalize via env/secret store.\"; exit 1\nfi\n# Gitleaks staged\nif command -v gitleaks >/dev/null 2>&1; then\n  gitleaks protect --staged --redact --config tools/security/gitleaks.toml || { echo \"❌ gitleaks found potential secrets.\"; exit 1; }\nelse\n  echo \"ℹ️ gitleaks not found locally; CI will run full secrets scan.\"\nfi\necho \"✅ Pre-commit checks passed.\"\n"
  },
  {
    "path": "tools/hooks/pre-push",
    "content": "#!/usr/bin/env bash\nset -euo pipefail\n( cd app-frontend && npm test --silent )\ndotnet test ./app-api/tests/UnitTests /p:CollectCoverage=true /p:Threshold=80\ndotnet test ./app-api/tests/ArchitectureTests\n( cd app-frontend && npm run api:lint && npm run api:diff )\n"
  },
  {
    "path": "tools/ci/workflows/ci.yml",
    "content": "name: ci\non: [push, pull_request]\njobs:\n  unit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - run: |\n          [ -f package-lock.json ] && npm ci || npm install\n          npm test -- --ci --coverage\n        working-directory: app-frontend\n      - run: dotnet restore ./app-api/AppApi.sln && dotnet test ./app-api/tests/UnitTests /p:CollectCoverage=true /p:Threshold=80\n  arch:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - run: |\n          [ -f package-lock.json ] && npm ci || npm install\n          npm run arch:check\n        working-directory: app-frontend\n      - run: dotnet test ./app-api/tests/ArchitectureTests\n  contract_integration:\n    runs-on: ubuntu-latest\n    services:\n      postgres:\n        image: postgres:16\n        env: { POSTGRES_PASSWORD: postgres, POSTGRES_DB: appdb }\n        ports: [ \"5432:5432\" ]\n    steps:\n      - uses: actions/checkout@v4\n      - run: |\n          [ -f package-lock.json ] && npm ci || npm install\n          npm run api:lint\n          npm run api:diff\n        working-directory: app-frontend\n      - run: dotnet test ./app-api/tests/IntegrationTests\n  quality_gates:\n    runs-on: ubuntu-latest\n    needs: [unit, arch, contract_integration]\n    steps:\n      - uses: actions/checkout@v4\n      - run: node tools/metrics/check-pyramid.js\n"
  },
  {
    "path": "tools/ci/workflows/security.yml",
    "content": "name: security\non: [pull_request]\njobs:\n  secrets:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: gitleaks/gitleaks-action@v2\n        with: { config-path: tools/security/gitleaks.toml, redact: true }\n  sast:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: returntocorp/semgrep-action@v1\n        with: { config: tools/security/semgrep.yml }\n"
  },
  {
    "path": "tools/metrics/check-pyramid.js",
    "content": "#!/usr/bin/env node\nconst { execSync } = require('node:child_process');\nfunction count(pattern){ try{ return parseInt(execSync(`git ls-files | grep -E '${pattern}' | wc -l`).toString().trim()||'0',10);}catch{ return 0;}}\nconst unit=count('(tests\\\\/UnitTests|__tests__|\\\\.spec\\\\.ts$)');\nconst integration=count('tests\\\\/IntegrationTests');\nconst e2e=count('\\\\/e2e\\\\/');\nconst total=unit+integration+e2e||1; const pct=n=>Math.round((n/total)*100);\nif(pct(unit)<70||pct(unit)>85){ console.error(`❌ Unit tests should be 70–85% (now ${pct(unit)}%).`); process.exit(1);} \nif(pct(integration)<10||pct(integration)>25){ console.error(`❌ Integration/Contract 10–25% (now ${pct(integration)}%).`); process.exit(1);} \nif(pct(e2e)<5||pct(e2e)>10){ console.error(`❌ E2E 5–10% (now ${pct(e2e)}%).`); process.exit(1);} \nconsole.log('✅ Test pyramid looks healthy.');\n"
  },
  {
    "path": "tools/security/gitleaks.toml",
    "content": "title = \"BMAD CCA Secret Rules\"\n[allowlist]\nfiles = [\"env/.env.example\", \"tools/security/secret-allowlist.txt\"]\nregexTarget = \"match\"\nregexes = ['<YOUR_[A-Z0-9_]+>', 'DUMMY_(KEY|TOKEN)']\n[[rules]]\nid = \"generic-api-key\"\nregex = '''(?i)(api[_-]?key|token|secret|client[_-]?secret)\\s*[:=]\\s*['\"][A-Za-z0-9_\\-]{16,}['\"]'''\n[[rules]]\nid = \"password-in-code\"\nregex = '''(?i)password\\s*[:=]\\s*['\"][^'\"]+['\"]'''\n[[rules]]\nid = \"connection-string-with-creds\"\nregex='''(?i)(User\\s*ID|Uid|User Id|Username)=[^;]+;?\\s*(Password|Pwd)=[^;]+;'''\n[[rules]]\nid = \"aws-access-key\"\nregex = '''AKIA[0-9A-Z]{16}'''\n[[rules]]\nid = \"credential-in-url\"\nregex = '''https?:\\/\\/[^\\/\\s:@]+:[^\\/\\s:@]+@'''\n[[rules]]\nid = \"jwt-hardcoded\"\nregex = '''eyJ[A-Za-z0-9_-]{10,}\\.[A-Za-z0-9_-]{10,}\\.[A-Za-z0-9_-]{10,}'''\n"
  },
  {
    "path": "tools/security/semgrep.yml",
    "content": "rules:\n  - id: dotnet-hardcoded-secrets\n    languages: [csharp]\n    severity: ERROR\n    message: Hardcoded secret/conn string detected. Use env + Secret Manager.\n    patterns:\n      - pattern-either:\n          - pattern: string $S = \"...Password=...\";\n          - pattern: new SqlConnection(\"...Password=...\");\n          - pattern: string $S = \"...ApiKey=...\";\n  - id: angular-no-secrets\n    languages: [typescript]\n    severity: ERROR\n    message: Do not embed secrets in frontend code.\n    patterns:\n      - pattern-either:\n          - pattern: const $X = \"sk_live\" ...\n          - pattern: const $X = /AIza[0-9A-Za-z\\-_]{35}/\n          - pattern: $X = \"Bearer \" + \"...\"\n  - id: no-basic-auth-urls\n    languages: [csharp, typescript]\n    severity: ERROR\n    message: Credentials in URL are forbidden.\n    pattern: \"http://$USER:$PASS@$HOST\"\n"
  },
  {
    "path": "tools/security/secret-allowlist.txt",
    "content": "<YOUR_API_KEY>\nDUMMY_TOKEN\n"
  },
  {
    "path": "tools/git/flow.sh",
    "content": "#!/usr/bin/env bash\nset -euo pipefail\ncmd=${1:-help}; shift || true\ncase \"$cmd\" in\n  init) git checkout -B develop && git branch -M main main ;;\n  feature) git checkout -b \"feature/$1\" develop ;;\n  release) git checkout -b \"release/$1\" develop ;;\n  finish-release)\n    ver=\"$1\"; git checkout main && git merge --no-ff \"release/$ver\" -m \"chore(release): $ver\" && git tag \"v$ver\"\n    git checkout develop && git merge --no-ff \"release/$ver\" && git branch -d \"release/$ver\" ;;\n  hotfix) git checkout -b \"hotfix/$1\" main ;;\n  finish-hotfix)\n    ver=\"$1\"; git checkout main && git merge --no-ff \"hotfix/$ver\" -m \"fix!: hotfix $ver\" && git tag \"v$ver\"\n    git checkout develop && git merge --no-ff \"hotfix/$ver\" && git branch -d \"hotfix/$ver\" ;;\n  *) echo \"Usage: flow.sh {init|feature <name>|release <x.y.z>|finish-release <x.y.z>|hotfix <x.y.z>|finish-hotfix <x.y.z>}\"; exit 1;;\nesac\n"
  }
]