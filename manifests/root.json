[
  {
    "path": "claude.md",
    "content": "# Claude Code — Working Agreement\\n\\n- Use **MCP tools only** from `mcp/config.json`. If a command is missing, propose it; do not run shell commands directly.\\n- **TDD-first**: write failing tests, then the minimal code to pass, then refactor.\\n- **API-first**: keep `api/openapi.yaml` the source of truth. Update spec + codegen and contract tests together.\\n- **Clean Architecture**: respect layer boundaries; your code must pass architecture tests.\\n- **Security**: never emit real secrets; use placeholders (e.g., `<YOUR_API_KEY>`).\\n\\n## Sequential Thinking (Plan→Do)\\nFor non-trivial changes (>100 lines or cross-layer):\\n1) `/plan create \\\"<title>\\\" --scope api,fe --goal \\\"...\\\"`\\n2) Update steps & tests in the plan file and reference `Plan-ID: <id>` in commits/PR.\\n3) Execute steps sequentially; keep commits small with tests first.\\n\\n## MCP Servers in this repo\\n- github — PRs, issues, comments (env: GITHUB_TOKEN)\\n- atlassian — Jira/Confluence (env: ATLASSIAN_*)\\n- playwright — E2E orchestration (run/report/trace)\\n- context7 — project knowledge (search/read/refresh)\\n\\n## Slash-commands (via MCP)\\n- `/arch check` — run architecture tests (Angular + .NET)\\n- `/api contract verify` — spectral lint + openapi-diff\\n- `/test pyramid` — show ratios/coverage and next-test suggestions\\n- `/security scan` — secrets + SAST scan\\n- `/git feature <name>` — create a GitFlow feature branch\\n- `/plan create <title>` — generate a Change Plan\\n"
  },
  {
    "path": ".github/PULL_REQUEST_TEMPLATE.md",
    "content": "### Why\n<link to story / plan>\n\n### What changed (small + test-backed)\n- [ ] Small PR (≤400 lines)\n- [ ] Tests added/updated first (TDD)\n- [ ] Architecture tests pass locally (`/arch check`)\n- [ ] OpenAPI updated + contract tests green\n- [ ] Security scan clean (gitleaks/semgrep)\n\n### Notes\n<risk, rollout>\n"
  },
  {
    "path": ".gitattributes",
    "content": "* text=auto eol=lf\n"
  },
  {
    "path": ".gitignore",
    "content": "node_modules/\n.env\n.env.*\nsecrets.*\n*.key\n*.pem\n*.pfx\n*.pub\n*.kube\n*.tfstate\n.DS_Store\n.context7/\napp-frontend/playwright-report/\napp-frontend/test-results/\napp-api/**/bin/\napp-api/**/obj/\n"
  },
  {
    "path": "CODEOWNERS",
    "content": "/api/*           @devex-team\n/tools/security/* @devex-team\n"
  },
  {
    "path": "standards/git.md",
    "content": "- Conventional Commits required; small commits (≤200 lines/≤10 files).\n- GitFlow: long-lived `main` + `develop`; feature/release/hotfix branches.\n- PR ≤ 400 lines, squash merges to `develop`.\n"
  },
  {
    "path": "standards/test-strategy.md",
    "content": "- Test pyramid: Unit 70–85%, Integration/Contract 10–25%, E2E 5–10%.\n- Coverage minimums: API unit 80%; Angular unit 70%.\n- All PRs must include tests for code changes (TDD enforced).\n"
  },
  {
    "path": "standards/security.md",
    "content": "- No hardcoded secrets; scans via gitleaks + semgrep block PRs.\n- Approved placeholders only (see `env/.env.example`).\n- Secrets from env/secret store only; never committed.\n"
  },
  {
    "path": "plans/README.md",
    "content": "For any change >100 added lines or cross-layer edits, create/attach a plan:\n- Create: `/plan create \"<title>\" --scope api,fe --goal \"...\"`\n- Reference `Plan-ID: <id>` in commit message or PR description.\n- Outline steps and tests before coding.\n"
  },
  {
    "path": "scripts/install-hooks.sh",
    "content": "#!/usr/bin/env bash\nset -euo pipefail\ngit config core.hooksPath tools/hooks\nchmod +x tools/hooks/* || true\nchmod +x tools/git/flow.sh || true\nchmod +x tools/mcp/*.js || true\nchmod +x tools/metrics/check-pyramid.js || true\necho \"✅ Hooks installed.\"\n"
  },
  {
    "path": "env/.env.example",
    "content": "GITHUB_TOKEN=<YOUR_GITHUB_TOKEN>\nATLASSIAN_HOST=https://your-domain.atlassian.net\nATLASSIAN_EMAIL=user@example.com\nATLASSIAN_API_TOKEN=<YOUR_ATLASSIAN_API_TOKEN>\n"
  }
]